@page "/login"
@inject NavigationManager NavigationManager

<div class="card">
    <h4 class="card-header">Login</h4>
    <label>@errorText</label>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="model.Username" class="form-control" />
                <ValidationMessage For="@(() => model.Username)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
            <NavLink href="account/register" class="btn btn-link">Register</NavLink>
        </EditForm>
    </div>
</div>
@code {
    private Model.Login model = new Model.Login();
    private bool loading;
    private string? errorText;
    private async Task OnValidSubmit()
    {
        // reset alerts on submit
        errorText = null;
        loading = true;
        try
        {
            //await AccountService.Login(model);

            var returnUrl = NavigationManager.QueryString("returnUrl") ?? string.Empty;
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            errorText = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }
}
